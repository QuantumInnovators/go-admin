definitions:
  dto.SequenceDeleteReq:
    properties:
      ids:
        items:
          type: integer
        type: array
    type: object
  dto.SequenceInsertReq:
    properties:
      createBy:
        type: integer
      sequence:
        type: string
      sequenceDescription:
        type: string
      sequenceId:
        type: string
      updateBy:
        type: integer
    type: object
  dto.SequenceUpdateReq:
    properties:
      createBy:
        type: integer
      id:
        type: integer
      sequence:
        type: string
      sequenceDescription:
        type: string
      sequenceId:
        type: string
      updateBy:
        type: integer
    type: object
  handler.Login:
    properties:
      code:
        type: string
      password:
        type: string
      username:
        type: string
      uuid:
        type: string
    required:
    - code
    - password
    - username
    - uuid
    type: object
  models.Sequence:
    properties:
      createBy:
        type: integer
      createdAt:
        type: string
      id:
        type: integer
      sequence:
        type: string
      sequenceDescription:
        type: string
      sequenceId:
        type: string
      updateBy:
        type: integer
      updatedAt:
        type: string
    type: object
  response.Page:
    properties:
      count:
        type: integer
      pageIndex:
        type: integer
      pageSize:
        type: integer
    type: object
  response.Response:
    properties:
      code:
        type: integer
      msg:
        type: string
      requestId:
        description: 数据集
        type: string
      status:
        type: string
    type: object
info:
  contact: {}
paths:
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: |-
        获取token
        LoginHandler can be used by clients to get a jwt token.
        Payload needs to be json in the form of {"username": "USERNAME", "password": "PASSWORD"}.
        Reply will be of the form {"token": "TOKEN"}.
        dev mode：It should be noted that all fields cannot be empty, and a value of 0 can be passed in addition to the account password
        注意：开发模式：需要注意全部字段不能为空，账号密码外可以传入0值
      parameters:
      - description: account
        in: body
        name: account
        required: true
        schema:
          $ref: '#/definitions/handler.Login'
      responses:
        "200":
          description: '{"code": 200, "expire": "2019-08-07T12:45:48+08:00", "token":
            ".eyJleHAiOjE1NjUxNTMxNDgsImlkIjoiYWRtaW4iLCJvcmlnX2lhdCI6MTU2NTE0OTU0OH0.-zvzHvbg0A"
            }'
          schema:
            type: string
      summary: 登陆
      tags:
      - 登陆
  /api/v1/public/uploadFile:
    post:
      consumes:
      - multipart/form-data
      description: 获取JSON
      parameters:
      - description: type
        in: query
        name: type
        required: true
        type: string
      - description: file
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: '{"code": -1, "message": "添加失败"}'
          schema:
            type: string
      security:
      - Bearer: []
      summary: 上传图片
      tags:
      - 公共接口
  /api/v1/sequence:
    delete:
      description: 删除Sequence
      parameters:
      - description: body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.SequenceDeleteReq'
      responses:
        "200":
          description: '{"code": 200, "message": "删除成功"}'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: 删除Sequence
      tags:
      - Sequence
    get:
      description: 获取Sequence列表
      parameters:
      - description: 页条数
        in: query
        name: pageSize
        type: integer
      - description: 页码
        in: query
        name: pageIndex
        type: integer
      responses:
        "200":
          description: '{"code": 200, "data": [...]}'
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  allOf:
                  - $ref: '#/definitions/response.Page'
                  - properties:
                      list:
                        items:
                          $ref: '#/definitions/models.Sequence'
                        type: array
                    type: object
              type: object
      security:
      - Bearer: []
      summary: 获取Sequence列表
      tags:
      - Sequence
    post:
      consumes:
      - application/json
      description: 创建Sequence
      parameters:
      - description: data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.SequenceInsertReq'
      responses:
        "200":
          description: '{"code": 200, "message": "添加成功"}'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: 创建Sequence
      tags:
      - Sequence
  /api/v1/sequence/{id}:
    get:
      description: 获取Sequence
      parameters:
      - description: id
        in: path
        name: id
        type: integer
      responses:
        "200":
          description: '{"code": 200, "data": [...]}'
          schema:
            allOf:
            - $ref: '#/definitions/response.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.Sequence'
              type: object
      security:
      - Bearer: []
      summary: 获取Sequence
      tags:
      - Sequence
    put:
      consumes:
      - application/json
      description: 修改Sequence
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: integer
      - description: body
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/dto.SequenceUpdateReq'
      responses:
        "200":
          description: '{"code": 200, "message": "修改成功"}'
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: 修改Sequence
      tags:
      - Sequence
  /api/v1/sequence/class/{class_id}:
    get:
      description: 获取Sequence
      parameters:
      - description: class_id
        in: path
        name: class_id
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.Response'
      security:
      - Bearer: []
      summary: 获取Sequence
      tags:
      - Sequence
  /logout:
    post:
      consumes:
      - application/json
      description: 获取token
      responses:
        "200":
          description: '{"code": 200, "msg": "成功退出系统" }'
          schema:
            type: string
      security:
      - Bearer: []
      summary: 退出登录
swagger: "2.0"
